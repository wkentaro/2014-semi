(load "package://jsk_2014_picking_challenge/euslisp/motion/robot-motion-common.l")

(defun place-object-avs (arm)
  (let (binc avs)
    (setq binc (make-cascoords :pos (send *orderbin* :transform-vector #f(0 0 300))
                               :rot #2f((-3.6e-06 0 -1) (0 1 0) (1 0 -3.6e-06))))
    (pushback (send *baxter* arm :inverse-kinematics binc :rotation-axis :z :revert-if-fail nil) avs)
    (pushback (send *baxter* arm :move-end-pos #f(0 0 -250) :world :revert-if-fail nil) avs)
    avs))

(defun place-object (arm)
  (let (avs shake-avs)
    (setq avs (append avs (fold-pose-back (if (eq arm :larm) :rarm :larm))))  ; fold oposite arm
    (setq avs (append avs (fold-pose-up arm)))
    (setq avs (append avs (untuck-pose arm)))
    (setq avs (append avs (place-object-avs arm)))
    (send *ri* :angle-vector-sequence avs :fast :default-controller 0 :scale 2.4)
    (send *ri* :wait-interpolation)
    (send *ri* :stop-grasp)
    (unix::sleep 2)
    (setq shake-avs (list (send *baxter* :angle-vector)))
    (pushback (send *baxter* arm :move-end-pos #f(0 0 80) :world) shake-avs)
    (pushback (elt shake-avs 0) shake-avs)
    (dotimes (i 3)
      (send *ri* :angle-vector-sequence shake-avs :fast :default-controller 0 :scale 2.4)
      (send *ri* :wait-interpolation))
    avs))