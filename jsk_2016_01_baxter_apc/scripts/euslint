#!/usr/bin/env python

from __future__ import print_function
import argparse
import sys

import yaml


def parse(source_code, max_line_length):
    is_block_comment = False
    result = {
        'parenthesis_open': 0,
        'parenthesis_close': 0,
        'tab': [],
        'whitespace': [],
        'line_length': [],
    }
    for line_num, line in enumerate(source_code.splitlines()):
        if line.startswith('#|'):
            is_block_comment = True
        elif line.startswith('|#'):
            is_block_comment = False
        if is_block_comment:
            continue
        is_beginning = True
        is_line_comment = False
        is_inline_comment = False
        has_quote = False
        in_quote = False
        whitespace = 0
        for char in line:
            if char == ';':
                if is_beginning:
                    is_line_comment = True
                else:
                    is_inline_comment = True
                if in_quote is False:
                    break
            if char == ' ':
                if is_beginning is not True:
                    whitespace += 1
            else:
                if is_beginning:
                    is_beginning = False
            if char == '(':
                result['parenthesis_open'] += 1
            if char == ')':
                result['parenthesis_close'] += 1
            if char == '"':
                in_quote = not in_quote
                has_quote = True
            if char == '\t':
                result['tab'].append(line_num)
        is_comment = is_line_comment or is_inline_comment
        if len(line.split()) != 0 and is_comment is not True \
           and has_quote is not True and whitespace != len(line.split())-1:
            result['whitespace'].append(line_num)
        if is_line_comment is not True \
           and has_quote is not True and len(line) > max_line_length:
            result['line_length'].append([line_num, len(line)])
    return result


def test_parenthesis(result):
    if result['parenthesis_open'] != result['parenthesis_close']:
        print("parenthesis: Number of open/close parenthesises don't much: {0} != {1}"
              .format(result['parenthesis_open'], result['parenthesis_close']),
              file=sys.stderr)
        return 1
    return 0


def test_tab(result):
    if len(result['tab']) != 0:
        for tab_result in result['tab']:
            print('tab: There is tab at line {0}'.format(tab_result+1),
                  file=sys.stderr)
        return 1
    return 0


def test_whitespace(result):
    if len(result['whitespace']) != 0:
        for tab_result in result['whitespace']:
            print('whitespace: Invalid white space usage at line {0}'.format(tab_result+1),
                  file=sys.stderr)
        return 1
    return 0


def test_line_length(result, max_line_length):
    if len(result['line_length']) != 0:
        for line_length_result in result['line_length']:
            print('line_length: Line length exceeds {2} characters at line {0}: {1} > {2}'
                  .format(line_length_result[0]+1, line_length_result[1], max_line_length),
                          file=sys.stderr)
        return 1
    return 0


def lint(source_code, ignore_list, max_line_length):
    result = parse(source_code, max_line_length)

    result_display = yaml.safe_dump({'RESULT': result},
                                    default_flow_style=False)
    test_list = []
    if not 'parenthesis' in ignore_list:
        test_list.append(test_parenthesis(result))
    if not 'line_length' in ignore_list:
        test_list.append(test_line_length(result, max_line_length))
    if not 'tab' in ignore_list:
        test_list.append(test_tab(result))
    if not 'whitespace' in ignore_list:
        test_list.append(test_whitespace(result))

    return sum(test_list)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='filename')
    parser.add_argument('-l', '--line-length', type=int, help='maximum line length, defalut: 100')
    parser.add_argument('-i', '--ignore', type=str, help='list of ignoring check ids.')
    args = parser.parse_args()

    filename = args.filename
    max_line_length = args.line_length
    if max_line_length is None:
        max_line_length = 100
    if args.ignore is None:
        ignore_list = []
    else:
        ignore_list = args.ignore.split(',')
    source_code = open(filename).read()
    sys.exit(lint(source_code, ignore_list, max_line_length))


if __name__ == '__main__':
    main()
